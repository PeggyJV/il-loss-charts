{"version":3,"sources":["components/usd-value-widget.js","components/pair-selector.js","components/lp-input.js","components/lp-stats-widget.js","components/lp-stats-chart.js","services/uniswap.js","containers/app-container.js","services/calculate-lp-stats.js","App.js","reportWebVitals.js","index.js"],"names":["formatter","Intl","NumberFormat","style","currency","USDValueWidget","title","value","displayValue","format","parseInt","Card","Body","Title","Text","pairToDisplayText","pair","token0","symbol","token1","PairSelector","pairs","currentPairId","setPair","defaultValue","pairEntries","reduce","acc","id","window","data","map","filter","caseSensitive","onChange","selectedLabel","dateFormats","Object","assign","defaultFormats","default","dateFnsLocalizer","formats","LPInput","lpDate","setLPDate","pairData","lpShare","setLPShare","dailyDataAtLPDate","updateShare","denom","poolShare","BigNumber","div","reserveUSD","setUsdAmt","setToken0Amt","times","reserve0","toNumber","setToken1Amt","reserve1","usdValue","Error","useState","usdAmt","token0Amt","token1Amt","useEffect","calcAmounts","className","Form","Group","Label","min","Date","max","time","Control","type","event","target","LPStatsWidget","lpStats","totalFees","intVal","Number","isNaN","Table","borderless","impermanentLoss","totalReturn","CustomTooltip","active","payload","label","runningFee","runningReturn","runningImpermanentLoss","LPStatsChart","chartData","i","days","runningFees","push","day","returns","width","height","margin","top","right","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","interval","tickLine","tickMargin","tickFormatter","tick","stroke","fill","strokeWidth","dot","content","UniswapFetcher","pairId","client","query","gql","response","error","feesUSD","volumeUSD","FEE_RATIO","toString","count","length","startDate","endDate","Math","floor","getTime","pairDayDatas","lastStartDate","_get100DaysHistoricalDailyData","dailyData","endDateTimestamp","dayMs","date","ApolloClient","uri","cache","InMemoryCache","ChartsContainer","initialData","allPairs","setAllPairs","setPairId","setPairData","historicalData","setHistoricalData","setLPStats","setDailyDataAtLPDate","isLoading","setIsLoading","a","Uniswap","getPairOverview","newPair","createdAtTimestamp","fetchPairData","getTopPairs","fetchAllPairs","getHistoricalDailyData","historicalDailyData","getDailyPairData","newLpStats","lpLiquidityUSD","firstDaily","runningVolume","calculateImpermanentLoss","startDailyData","endDailyData","initialExchangeRate","priceRatio","sqrt","plus","minus","forEach","index","vol","dailyVolumeUSD","dailyFees","dailyImpermanentLoss","dailyReturn","calculateLPStats","setTimeout","Container","Spinner","animation","Row","Col","lg","body","fluid","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52e77e45.chunk.js","sourcesContent":["import { Card } from 'react-bootstrap';\n\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nfunction USDValueWidget({ title, value }) {\n    const displayValue = formatter.format(parseInt(value, 10));\n\n    return (\n        <Card.Body>\n            <Card.Title>{title}</Card.Title>\n            <Card.Text>{displayValue}</Card.Text>\n        </Card.Body>\n    );\n}\n\nexport default USDValueWidget;","import { Card } from 'react-bootstrap';\nimport { Combobox } from 'react-widgets';\n\nfunction PairSelector({ pairs, currentPairId, setPair }) {\n    let defaultValue = null;\n    const pairEntries = pairs.reduce((acc, pair) => {\n        if (pair.id === currentPairId) defaultValue = pairToDisplayText(pair);\n        return { ...acc, [pairToDisplayText(pair)]: pair.id }\n    });\n\n    window.pairEntries = pairEntries;\n\n    return (\n        <Card.Body>\n            <Card.Title>Market</Card.Title>\n            <Card.Text>\n                <Combobox\n                    data={pairs.map(pairToDisplayText)}\n                    defaultValue={defaultValue}\n                    filter='contains'\n                    caseSensitive={false}\n                    onChange={selectedLabel => pairEntries[selectedLabel] && setPair(pairEntries[selectedLabel])}\n                />\n            </Card.Text>\n        </Card.Body>\n    );\n}\n\nfunction pairToDisplayText(pair) {\n    return `${pair.token0.symbol}/${pair.token1.symbol}`;\n}\n\nexport default PairSelector;\n","import { useState, useEffect } from 'react'\nimport { Form, Card } from 'react-bootstrap';\nimport BigNumber from 'bignumber.js';\nimport { DateTimePicker } from 'react-widgets';\nimport dateFnsLocalizer, { defaultFormats } from 'react-widgets-date-fns';\n\nimport 'styles/lp-input.scss';\n\nconst dateFormats = Object.assign(defaultFormats, { default: 'YYYY-MM-DD' });\ndateFnsLocalizer({ formats: dateFormats });\n\nfunction LPInput({ lpDate, setLPDate, pairData, lpShare, setLPShare, dailyDataAtLPDate }) {\n    const { token0, token1 } = pairData;\n\n    const calcAmounts = (lpShare, dailyDataAtLPDate) => {\n        const poolShare = new BigNumber(lpShare).div(dailyDataAtLPDate.reserveUSD);\n        const token0Amt = poolShare.times(dailyDataAtLPDate.reserve0).toNumber();\n        const token1Amt = poolShare.times(dailyDataAtLPDate.reserve1).toNumber();\n\n        setUsdAmt(lpShare);\n        setToken0Amt(token0Amt);\n        setToken1Amt(token1Amt);\n    }\n\n    const updateShare = (denom, value) => {\n        if (denom === 'USD') {\n            const poolShare = new BigNumber(value).div(dailyDataAtLPDate.reserveUSD);\n            setUsdAmt(value);\n            setToken0Amt(poolShare.times(dailyDataAtLPDate.reserve0).toNumber());\n            setToken1Amt(poolShare.times(dailyDataAtLPDate.reserve1).toNumber());\n\n            setLPShare(value);\n        } else if (denom === 'token0') {\n            const poolShare = new BigNumber(value).div(dailyDataAtLPDate.reserve0);\n            const usdValue = poolShare.times(dailyDataAtLPDate.reserveUSD).toNumber();\n            setUsdAmt(usdValue);\n            setToken0Amt(value);\n            setToken1Amt(poolShare.times(dailyDataAtLPDate.reserve1).toNumber());\n\n            setLPShare(usdValue);\n        } else if (denom === 'token1') {\n            const poolShare = new BigNumber(value).div(dailyDataAtLPDate.reserve1);\n            const usdValue = poolShare.times(dailyDataAtLPDate.reserveUSD).toNumber();\n            setUsdAmt(usdValue);\n            setToken0Amt(poolShare.times(dailyDataAtLPDate.reserve1).toNumber());\n            setToken1Amt(value);\n\n            setLPShare(usdValue);\n        } else {\n            throw new Error(`Tried to update share with invalid denom: ${denom}`);\n        }\n    };\n\n    const [usdAmt, setUsdAmt] = useState(lpShare);\n    const [token0Amt, setToken0Amt] = useState(0);\n    const [token1Amt, setToken1Amt] = useState(0);\n\n    useEffect(() => {\n        calcAmounts(lpShare, dailyDataAtLPDate);\n    }, [lpShare, dailyDataAtLPDate]);\n\n    return (\n        <Card.Body className=\"lp-input-form\">\n            <Form.Group>\n                <Form.Label>\n                    LP Date\n                </Form.Label>\n                <div>\n                    <DateTimePicker\n                        className=\"lp-date-picker form-control\"\n                        min={new Date('2020-05-18')}\n                        max={new Date()}\n                        format=\"yyyy-MM-dd\"\n                        value={lpDate}\n                        onChange={setLPDate}\n                        time={false}\n                    />\n                </div>\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    USD Liquidity\n                </Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    onChange={(event) => updateShare('USD', event.target.value)}\n                    value={usdAmt}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    {`${token0.symbol} Liquidity`}\n                </Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    onChange={(event) => updateShare('token0', event.target.value)}\n                    value={token0Amt}\n                />\n            </Form.Group>\n            <Form.Group>\n                <Form.Label>\n                    {`${token1.symbol} Liquidity`}\n                </Form.Label>\n                <Form.Control\n                    type=\"text\"\n                    onChange={(event) => updateShare('token1', event.target.value)}\n                    value={token1Amt}\n                />\n            </Form.Group>\n        </Card.Body >\n    );\n}\n\nexport default LPInput;","import { Card, Table } from 'react-bootstrap';\n\n\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\nfunction LPStatsWidget({ lpStats }) {\n    if (!lpStats.totalFees) return null;\n\n    const displayValue = (value) => {\n        const intVal = parseInt(value, 10);\n        if (Number.isNaN(intVal)) {\n            throw new Error(`Could not parse value for LP stats widget: ${value}`);\n        }\n\n        return formatter.format(intVal);\n    };\n\n    return (\n        <Card.Body className='lp-stats-widget'>\n            <Table borderless className='lp-stats-table'>\n                <tbody>\n                    <tr>\n                        <td className='lp-stats-table-cell label'>Fees Collected</td>\n                        <td className='lp-stats-table-cell value'>{displayValue(lpStats.totalFees)}</td>\n                    </tr>\n                    <tr>\n                        <td className='lp-stats-table-cell label'>Impermanent Loss</td>\n                        <td className='lp-stats-table-cell value'>{displayValue(lpStats.impermanentLoss)}</td>\n                    </tr>\n                    <tr>\n                        <td className='lp-stats-table-cell label'><strong>Total Return</strong></td>\n                        <td className='lp-stats-table-cell value'><strong>{displayValue(lpStats.totalReturn)}</strong></td>\n                    </tr>\n                </tbody>\n            </Table>\n        </Card.Body>\n    );\n}\n\nexport default LPStatsWidget;","import { ComposedChart, Area, Line, ResponsiveContainer, XAxis, YAxis, Tooltip } from 'recharts';\nimport LPStatsWidget from 'components/lp-stats-widget';\n\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD'\n\n    // These options are needed to round to whole numbers if that's what you want.\n    //minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n    //maximumFractionDigits: 0, // (causes 2500.99 to be printed as $2,501)\n});\n\n\nfunction LPStatsChart({ lpStats }) {\n    const chartData = [];\n    for (let i in lpStats.days) {\n        const runningFee = lpStats.runningFees[i].toNumber();\n        const runningReturn = lpStats.runningReturn[i].toNumber();\n\n        chartData.push({\n            day: lpStats.days[i],\n            runningFee,\n            runningReturn,\n            runningImpermanentLoss: lpStats.runningImpermanentLoss[i].toNumber(),\n            returns: [runningFee, runningReturn]\n        });\n    }\n\n    window.chartData = chartData;\n\n    return (\n        <ResponsiveContainer width=\"100%\" height={563}>\n            <ComposedChart\n                data={chartData}\n                margin={{ top: 10, right: 10, bottom: 10 }}\n                width={800}\n                height={563}\n            >\n                <defs>\n                    <linearGradient id=\"areaColor\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor=\"#0089ff\" stopOpacity={0.8} />\n                        <stop offset=\"95%\" stopColor=\"#0089ff\" stopOpacity={0} />\n                    </linearGradient>\n                </defs>\n                <XAxis dataKey='day' interval={30} tickLine={false} tickMargin={10} />\n                <YAxis tickFormatter={tick => formatter.format(tick)} width={100} />\n                <Area type='monotone' dataKey='returns' stroke='#0089ff' fill='url(#areaColor)' />\n                <Line type='monotone' dataKey='runningReturn' stroke='#5cc9f5' strokeWidth={3} dot={false} />\n                <Tooltip content={<CustomTooltip />} />\n            </ComposedChart>\n        </ResponsiveContainer>\n    );\n}\n\nfunction CustomTooltip({ active, payload, label }) {\n    if (!active || !payload) return null;\n    const lpStats = {\n        totalFees: payload[0].payload.runningFee,\n        totalReturn: payload[0].payload.runningReturn,\n        impermanentLoss: payload[0].payload.runningImpermanentLoss\n    };\n    return <LPStatsWidget lpStats={lpStats} />;\n}\n\nexport default LPStatsChart;","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nimport BigNumber from 'bignumber.js';\n\nexport default class UniswapFetcher {\n    static FEE_RATIO = 0.003;\n\n    static client = new ApolloClient({\n        uri: 'https://api.thegraph.com/subgraphs/name/uniswap/uniswap-v2',\n        cache: new InMemoryCache()\n    });\n\n    static async getPairOverview(pairId) {\n        const response = await UniswapFetcher.client\n            .query({\n                query: gql`\n                    {\n                        pair(id: \"${pairId}\"){\n                            token0 {\n                                id\n                                name\n                                symbol\n                                decimals\n                                derivedETH\n                                tradeVolumeUSD\n                                totalLiquidity\n                            }\n                            token1 {\n                                id\n                                symbol\n                                name\n                                decimals\n                                derivedETH\n                                tradeVolumeUSD\n                                totalLiquidity\n                            }\n                            reserve0\n                            reserve1\n                            reserveUSD\n                            trackedReserveETH\n                            token0Price\n                            token1Price\n                            volumeUSD\n                            txCount\n                            createdAtTimestamp\n                        }\n                    }\n                `\n            });\n\n        const { pair } = response?.data;\n\n        if (pair == null) {\n            throw new Error(`Could not fetch pair with ID ${pairId}. Error from response: ${response.error}`);\n        }\n\n        const feesUSD = new BigNumber(pair.volumeUSD, 10).times(UniswapFetcher.FEE_RATIO).toString();\n\n        return { ...pair, feesUSD };\n    }\n\n    static async getTopPairs(count = 1000) {\n        const response = await UniswapFetcher.client\n            .query({\n                query: gql`\n                    {\n                        pairs(first: ${count}, orderBy: volumeUSD, orderDirection: desc) {\n                            id\n                            token0 {\n                                id\n                                name\n                                symbol\n                            }\n                            token1 {\n                                id\n                                name\n                                symbol\n                            }\n\n                        }\n                    }\n                `\n            });\n\n        const { pairs } = response?.data;\n\n        if (pairs == null || pairs.length === 0) {\n            throw new Error(`Could not fetch top pairs. Error from response: ${response.error}`);\n        }\n\n        return pairs;\n    }\n\n    static async _get100DaysHistoricalDailyData(pairId, startDate, endDate) {\n        const response = await UniswapFetcher.client\n            .query({\n                query: gql`\n                    {\n                        pairDayDatas(orderBy: date, orderDirection: asc,\n                            where: {\n                                pairAddress: \"${pairId}\",\n                                date_gt: ${Math.floor(startDate.getTime() / 1000)}\n                                date_lt: ${Math.floor(endDate.getTime() / 1000)}\n                            }\n                        ) {\n                            date\n                            pairAddress\n                            dailyVolumeToken0\n                            dailyVolumeToken1\n                            dailyVolumeUSD\n                            reserveUSD\n                            reserve0\n                            reserve1\n                        }\n                }\n                `\n            });\n\n        const { pairDayDatas } = response?.data;\n\n        if (pairDayDatas == null) {\n            throw new Error(`Could not fetch daily data for pair ${pairId}. Error from response: ${response.error}`);\n        }\n\n        return pairDayDatas;  \n    }\n\n    static async getHistoricalDailyData(pairId, startDate, endDate = new Date()) {\n        let lastStartDate = startDate;\n        let dailyData = await UniswapFetcher._get100DaysHistoricalDailyData(pairId, startDate, endDate);\n        const endDateTimestamp = Math.floor(endDate.getTime() / 1000);\n        const dayMs = 1000 * 60 * 60 * 24;\n\n        // Keep fetching until we pass the end date\n        while (dailyData[dailyData.length - 1].date <= endDateTimestamp && Math.floor(lastStartDate.getTime() / 1000) <= endDateTimestamp) {\n            lastStartDate = new Date(dailyData[dailyData.length - 1].date * 1000 + dayMs); // skip ahead 24 hrs\n            dailyData = [...dailyData, ...(await UniswapFetcher._get100DaysHistoricalDailyData(pairId, lastStartDate, endDate))]\n        }\n\n        return dailyData;\n    }\n}","import { useEffect, useState } from 'react';\nimport { Container, Row, Col, Card, Spinner } from 'react-bootstrap';\n\nimport USDValueWidget from 'components/usd-value-widget';\nimport PairSelector from 'components/pair-selector';\nimport LPInput from 'components/lp-input';\nimport LPStatsWidget from 'components/lp-stats-widget';\nimport LPStatsChart from 'components/lp-stats-chart';\n\nimport initialData from 'constants/initialData.json';\nimport Uniswap from 'services/uniswap';\nimport calculateLPStats from 'services/calculate-lp-stats';\n\nfunction ChartsContainer() {\n    const [allPairs, setAllPairs] = useState(initialData.allPairs);\n    const [pairId, setPairId] = useState(initialData.pairId);\n    const [pairData, setPairData] = useState(initialData.pairData);\n    const [lpDate, setLPDate] = useState(new Date(initialData.lpDate));\n    const [lpShare, setLPShare] = useState(initialData.lpShare);\n    const [historicalData, setHistoricalData] = useState(initialData.historicalData)\n    const [lpStats, setLPStats] = useState(initialData.lpStats);\n    const [dailyDataAtLPDate, setDailyDataAtLPDate] = useState(initialData.dailyDataAtLPDate);\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        const fetchPairData = async () => {\n            // Fetch pair overview when pair ID changes\n            // Default to createdAt date if LP date not set\n            const newPair = await Uniswap.getPairOverview(pairId);\n            setPairData(newPair);\n            if (!lpDate) setLPDate(new Date(newPair.createdAtTimestamp * 1000));\n        }\n        fetchPairData();\n    }, [pairId, lpDate]);\n\n    useEffect(() => {\n        const fetchAllPairs = async () => {\n            // Fetch all pairs\n            const allPairs = await Uniswap.getTopPairs();\n            setAllPairs(allPairs);\n        }\n        fetchAllPairs();\n    });\n\n    useEffect(() => {\n        const getDailyPairData = async () => {\n            if (!lpDate) return;\n            // Get historical data for pair from lp date until now\n            const historicalDailyData = await Uniswap.getHistoricalDailyData(pairId, lpDate);\n            setHistoricalData(historicalDailyData);\n            setDailyDataAtLPDate(historicalDailyData[0]);\n        }\n        getDailyPairData();\n        setIsLoading(true);\n    }, [lpDate, pairId])\n\n    useEffect(() => {\n        if (!pairData) return;\n\n        const newLpStats = calculateLPStats(pairData, historicalData, lpShare);\n        setLPStats(newLpStats);\n    }, [pairData, lpShare, historicalData]);\n\n    useEffect(() => {\n        if (isLoading) {\n            setTimeout(() => setIsLoading(false), 2000);\n        }\n    }, [isLoading]);\n\n    if (!lpDate) return null;\n    if (allPairs.length === 0) return null;\n    if (!pairData) return null;\n\n    if (isLoading) {\n        return (\n            <Container className=\"my-auto loading-container\">\n                <Spinner animation=\"border\" />\n            </Container>\n        );\n    }\n\n    return (\n        <Container>\n            {isLoading &&\n                <Container className=\"my-auto loading-container\">\n                    <Spinner animation=\"border\" />\n                </Container>\n            }\n            <Row>\n                <Col lg={3}>\n                    <Card className=\"top-row-card\">\n                        <PairSelector pairs={allPairs} currentPairId={pairId} setPair={setPairId} />\n                    </Card>\n                </Col>\n                <Col lg={3}>\n                    <Card className=\"top-row-card\">\n                        <USDValueWidget title=\"USD Volume\" value={pairData.volumeUSD} />\n                    </Card>\n                </Col>\n                <Col lg={3}>\n                    <Card className=\"top-row-card\">\n                        <USDValueWidget title=\"Total Liquidity\" value={pairData.reserveUSD} />\n                    </Card>\n                </Col>\n                <Col lg={3}>\n                    <Card className=\"top-row-card\">\n                        <USDValueWidget title=\"Total Fees\" value={pairData.feesUSD} />\n                    </Card>\n                </Col>\n            </Row>\n            <Row>\n                <Col lg={9}>\n                    <Card body>\n                        <LPStatsChart lpStats={lpStats} />\n                    </Card>\n                </Col>\n                <Col lg={3}>\n                    <Container fluid>\n                        <Row>\n                            <Card className=\"lp-input-card\">\n                                <LPInput\n                                    pairData={pairData}\n                                    lpDate={lpDate}\n                                    setLPDate={setLPDate}\n                                    lpShare={lpShare}\n                                    setLPShare={setLPShare}\n                                    dailyDataAtLPDate={dailyDataAtLPDate}\n                                />\n                            </Card>\n                        </Row>\n                        <Row>\n                            <Card className=\"lp-stats-card\">\n                                <LPStatsWidget lpStats={lpStats} pairData={pairData} />\n                            </Card>\n                        </Row>\n                    </Container>\n                </Col>\n            </Row>\n        </Container>\n    );\n}\n\nexport default ChartsContainer;","import BigNumber from 'bignumber.js';\nimport { format } from 'date-fns';\n\nimport Uniswap from './uniswap';\n\nexport default function calculateLPStats(pairData, historicalData, lpLiquidityUSD) {\n    if (historicalData.length === 0) return {};\n\n    const firstDaily = historicalData[0];\n\n    const runningVolume = [new BigNumber(0)];\n    const runningFees = [new BigNumber(0)];\n    const runningImpermanentLoss = [new BigNumber(0)];\n    const runningReturn = [new BigNumber(0)];\n    const days = [format(new Date(firstDaily.date * 1000), 'MMM d')];\n\n\n    const calculateImpermanentLoss = (startDailyData, endDailyData) => {\n        const initialExchangeRate = new BigNumber(startDailyData.reserve0).div(new BigNumber(startDailyData.reserve1));\n        const currentExchangeRate = new BigNumber(endDailyData.reserve0).div(new BigNumber(endDailyData.reserve1));\n        const priceRatio = currentExchangeRate.div(initialExchangeRate);\n        const impermanentLossPct = new BigNumber(2).times(priceRatio.sqrt()).div(priceRatio.plus(1)).minus(1);\n        const impermanentLoss = impermanentLossPct.times(lpLiquidityUSD);\n\n        return impermanentLoss;\n    }\n\n    historicalData.forEach((dailyData, index) => {\n        if (index === 0) return;\n\n        const poolShare = new BigNumber(lpLiquidityUSD).div(dailyData.reserveUSD);\n\n        const vol = new BigNumber(dailyData.dailyVolumeUSD);\n        const dailyFees = vol.times(poolShare).times(Uniswap.FEE_RATIO);\n        const dailyImpermanentLoss = calculateImpermanentLoss(historicalData[index-1], dailyData);\n        const dailyReturn = dailyFees.plus(dailyImpermanentLoss);\n\n        runningVolume.push(\n            runningVolume[runningVolume.length - 1].plus(vol)\n        );\n        runningFees.push(\n            runningFees[runningFees.length - 1].plus(\n                dailyFees\n            )\n        );\n        runningImpermanentLoss.push(\n            runningImpermanentLoss[runningImpermanentLoss.length - 1].plus(\n                dailyImpermanentLoss\n            )\n        );\n        runningReturn.push(\n            runningReturn[runningReturn.length - 1].plus(\n                dailyReturn\n            )\n        );\n\n        days.push(format(new Date(dailyData.date * 1000), 'MMM d'))\n    })\n\n    const totalFees = runningFees[runningFees.length - 1];\n    const impermanentLoss = calculateImpermanentLoss(firstDaily, pairData);\n    const totalReturn = totalFees.plus(impermanentLoss);\n\n    return {\n        totalFees,\n        runningVolume,\n        runningFees,\n        runningImpermanentLoss,\n        runningReturn,\n        impermanentLoss,\n        totalReturn,\n        days\n    };\n}","import 'styles/app.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-widgets/dist/css/react-widgets.css';\n\nimport { Container, Row, Col } from 'react-bootstrap';\nimport AppContainer from 'containers/app-container';\n\nfunction App() {\n    return (\n        <div className=\"app\">\n            <Container fluid=\"lg\">\n                <Row>\n                    <Col><h2 className=\"page-title\">Uniswap Impermanent Loss Calculator</h2></Col>\n                </Row>\n                <Row>\n                    <AppContainer />\n                </Row>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'fontsource-roboto';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}