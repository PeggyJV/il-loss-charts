type ethereum {
    network: String!
    dexTrades(
        options: Options,
        date: SearchDate,
        exchangeName: Exchange,
        baseCurrency: BaseCurrency,
        quoteCurrency: QuoteCurrency
    ): DexTrades!
    date: String!
    exchangeName: String!
}

input Options {
    asc: String
    desc: String
}

input SearchDate {
    between: [String]
    since: String
}

input Exchange {
    is: String!
}

input BaseCurrency {
    is: String!
}

input QuoteCurrency {
    is: String!
}

type Token {
    symbol: String!
    address: String!
}

type DexTrades {
    baseCurrency: Token!
    quoteCurrency: Token!
    timeInterval: TimeInterval
    baseAmount: Int!
    quoteAmount: String!
    count: Int!
    quotePrice(calculate: String = "maximum"): Int!
    maximum_price: Int!
    minimum_price: Int!
    open_price: String!
    close_price: String!
}

type TimeInterval {
    day(count: Int): String
}

type Query {
    # getPoolDailyOHLC(baseTokenId: ID!, quoteTokenId: ID!, startDate: String, endDate: String): ethereum
    ethereum(network: String = "ethereum"): ethereum
}

schema {
  query: Query
}