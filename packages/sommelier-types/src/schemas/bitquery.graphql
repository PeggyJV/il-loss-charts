enum network {
    ethereum
}

enum ofFilter {
    block
}

enum getFilter {
    quote_price
}

enum calculation {
    minimum
    maximum
}

type ethereum {
    dexTrades(
        options: Options,
        date: SearchDate,
        exchangeName: Exchange,
        baseCurrency: BaseCurrency,
        quoteCurrency: QuoteCurrency
    ): DexTrades!
    date: String!
    exchangeName: String!
}

input Options {
    asc: String
    desc: String
}

input SearchDate {
    between: [String]
    since: String
}

input Exchange {
    is: String!
}

input BaseCurrency {
    is: String!
}

input QuoteCurrency {
    is: String!
}

type Token {
    symbol: String!
    address: String!
}

type DexTrades {
    baseCurrency: Token!
    quoteCurrency: Token!
    timeInterval: TimeInterval
    baseAmount: Int!
    quoteAmount: String!
    # Both trades and count are here because this codegen doesn't seem to work well with renamed fields in queries
    trades: Int
    count: Int
    quotePrice(calculate: calculation = maximum): Int!
    maximum_price: Int!
    minimum_price: Int!
    open_price: String
    close_price: String
    minimum(of: ofFilter = block, get: getFilter = quote_price): String
    maximum(of: ofFilter = block, get: getFilter = quote_price): String
}

type TimeInterval {
    day(count: Int): String
}

type Query {
    # getPoolDailyOHLC(baseTokenId: ID!, quoteTokenId: ID!, startDate: String, endDate: String): ethereum
    ethereum(network: network = ethereum): ethereum
}

schema {
  query: Query
}