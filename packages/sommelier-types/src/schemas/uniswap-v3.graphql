scalar BigInt
scalar BigDecimal
scalar Bytes

type Factory @entity {
  # factory address
  id: ID!

  # pool info
  poolCount: BigInt!

  # total volume
  totalVolumeUSD: BigDecimal!
  totalVolumeETH: BigDecimal!

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal!

  # tracked and untracked combined
  combinedVolumeUSD: BigDecimal!

  # total liquidity
  totalLiquidityUSD: BigDecimal!
  totalLiquidityETH: BigDecimal!

  # transactions
  txCount: BigInt!
}

type Token @entity {
  # token address
  id: ID!

  # mirrored from the smart contract
  symbol: String!
  name: String!
  decimals: BigInt!

  # used for other stats like marketcap
  totalSupply: BigInt!

  # token specific volume
  tradeVolume: BigDecimal!
  tradeVolumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  combinedVolumeUSD: BigDecimal!

  # transactions across all pairs
  txCount: BigInt!

  # all pools containing this token
  poolCount: BigInt!

  # liquidity across all pairs
  totalLiquidity: BigDecimal!

  # derived prices
  derivedETH: BigDecimal

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  poolDayDataBase: [PoolDayData!]! @derivedFrom(field: "token0")
  poolDayDataQuote: [PoolDayData!]! @derivedFrom(field: "token1")
  poolBase: [Pool!]! @derivedFrom(field: "token0")
  poolQuote: [Pool!]! @derivedFrom(field: "token1")
}

type Pool @entity {
  # pool address
  id: ID!

  # mirrored from the smart contract
  token0: Token!
  token1: Token!
  feeTier: BigInt!
  tickSpacing: BigInt!

  # base values of liquidity and sqrtPrice across entire pool
  liquidity: BigDecimal!
  sqrtPrice: BigDecimal!

  # Reserves across entire liquidity distribution - derived from liquidity and sqrtPrice
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # further derived properties
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pool reserves and global
  
  # Price in terms of the asset pair - derived from sqrtPrice
  token0Price: BigDecimal!
  token1Price: BigDecimal!

  # lifetime volume stats across entire liquidity distribution
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  combinedVolumeUSD: BigDecimal!
  txCount: BigInt!

  # collected and uncollected fee amounts
  # collected + uncollected = fees
  uncollectedFeesToken0: BigDecimal!
  uncollectedFeesToken1: BigDecimal!
  uncollectedFeesUSD: BigDecimal!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  poolHourData: [PoolHourData!]! @derivedFrom(field: "pool")
  poolDayData: [PoolDayData!]! @derivedFrom(field: "pool")
  mints: [Mint!]! @derivedFrom(field: "pool")
  burns: [Burn!]! @derivedFrom(field: "pool")
  swaps: [Swap!]! @derivedFrom(field: "pool")
  collects: [Collect!]! @derivedFrom(field: "pool")
  ticks: [Tick!]! @derivedFrom(field: "pool")
}

type Tick @entity {
  # format: <pool address>-<tick index>
  id: ID!
  pool: Pool!

  # Price bounds of the tick - defined by tickSpacing
  sqrtPriceLower: BigDecimal!
  sqrtPriceUpper: BigDecimal!

  # Whether tick is active in the tick bitmap
  # - is it a bound of some liquidity provision?
  isActive: Boolean!

  # Reserves across the tick
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # further derived properties
  reserveETH: BigDecimal!
  reserveUSD: BigDecimal!
  trackedReserveETH: BigDecimal! # used for separating per pool reserves and global
  
  # lifetime volume stats within the tick range
  volumeToken0: BigDecimal!
  volumeToken1: BigDecimal!
  volumeUSD: BigDecimal!
  untrackedVolumeUSD: BigDecimal!
  txCount: BigInt!
  
  # collected and uncollected fee amounts
  # collected + uncollected = fees
  uncollectedFeesToken0: BigDecimal!
  uncollectedFeesToken1: BigDecimal!
  uncollectedFeesUSD: BigDecimal!
  collectedFeesToken0: BigDecimal!
  collectedFeesToken1: BigDecimal!
  collectedFeesUSD: BigDecimal!

  # creation stats
  createdAtTimestamp: BigInt!
  createdAtBlockNumber: BigInt!

  # Fields used to help derived relationship
  liquidityProviderCount: BigInt! # used to detect new exchanges
  # derived fields
  swaps: [Swap!]! @derivedFrom(field: "tick")
}

type Transaction @entity {
  id: ID! # txn hash
  blockNumber: BigInt!
  timestamp: BigInt!
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
  collects: [Collect]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool
  pool: Pool!

  # populated from the primary Transfer event
  to: Bytes!
  liquidity: BigDecimal!

  # populated from the Mint event
  sender: Bytes
  amount0: BigDecimal!
  amount1: BigDecimal!
  tickLower: BigInt!
  tickUpper: BigInt!
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool
  pool: Pool!

  # populated from the primary Transfer event
  liquidity: BigDecimal!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal!
  amount1: BigDecimal!
  tickLower: BigInt!
  tickUpper: BigInt!
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal

  # mark uncomplete in ETH case
  needsComplete: Boolean!

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: Bytes
  feeLiquidity: BigDecimal
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool
  pool: Pool!

  # populated from the Swap event
  sender: Bytes!
  from: Bytes! # the EOA that initiated the txn
  amount0In: BigDecimal!
  amount1In: BigDecimal!
  amount0Out: BigDecimal!
  amount1Out: BigDecimal!
  sqrtPriceX96: BigDecimal!
  tick: Tick!

  to: Bytes!
  logIndex: BigInt

  # derived info
  amountUSD: BigDecimal!
}

type Collect @entity {
  # transaction hash + "-" + index in collect Transaction array
  id: ID!
  transaction: Transaction!
  timestamp: BigInt! # need this to pull recent txns for specific token or pool
  pool: Pool!

  # populated from the Burn event
  sender: Bytes
  amount0: BigDecimal!
  amount1: BigDecimal!
  tickLower: BigInt!
  tickUpper: BigInt!
  to: Bytes
  logIndex: BigInt
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal
}

# stores for USD calculations
type Bundle @entity {
  id: ID!
  ethPrice: BigDecimal! # price of ETH usd
}

# Data accumulated and condensed into day stats for all of Uniswap
type UniswapDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400
  date: Int!

  dailyVolumeETH: BigDecimal!
  dailyVolumeUSD: BigDecimal!
  dailyVolumeUntracked: BigDecimal!

  totalVolumeETH: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalVolumeUSD: BigDecimal! # Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal!

  txCount: BigInt!
}

type PoolHourData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  periodStartUnix: Int! # unix timestamp for start of hour
  pool: Pool!
  token0: Token!
  token1: Token!
  
  # reserves at end of period
  liquidity: BigDecimal!
  sqrtPrice: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  periodVolumeToken0: BigDecimal!
  periodVolumeToken1: BigDecimal!
  periodVolumeUSD: BigDecimal!
  periodTxCount: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type PoolDayData @entity {
  # format: <pool address>-<timestamp>
  id: ID!
  date: Int!
  pool: Pool!
  token0: Token!
  token1: Token!

  # reserves at end of period
  liquidity: BigDecimal!
  sqrtPrice: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  periodVolumeToken0: BigDecimal!
  periodVolumeToken1: BigDecimal!
  periodVolumeUSD: BigDecimal!
  periodTxCount: BigInt!
}

type TickHourData @entity {
  # format: <pool address>-<tick index>-<timestamp>
  id: ID!
  periodStartUnix: Int! # unix timestamp for start of hour
  pool: Pool!
  tick: Tick!
  token0: Token!
  token1: Token!
  
  # reserves at end of period
  liquidity: BigDecimal!
  sqrtPrice: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  periodVolumeToken0: BigDecimal!
  periodVolumeToken1: BigDecimal!
  periodVolumeUSD: BigDecimal!
  periodTxCount: BigInt!
}

# Data accumulated and condensed into day stats for each exchange
type TickDayData @entity {
  # format: <pool address>-<tick index>-<timestamp>
  id: ID!
  date: Int!
  pool: Pool!
  tick: Tick!
  token0: Token!
  token1: Token!

  # reserves at end of period
  liquidity: BigDecimal!
  sqrtPrice: BigDecimal!
  reserve0: BigDecimal!
  reserve1: BigDecimal!

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  periodVolumeToken0: BigDecimal!
  periodVolumeToken1: BigDecimal!
  periodVolumeUSD: BigDecimal!
  periodTxCount: BigInt!
}

type TokenDayData @entity {
  id: ID!
  date: Int!
  token: Token!

  # volume stats
  periodVolumeToken: BigDecimal!
  periodVolumeETH: BigDecimal!
  periodVolumeUSD: BigDecimal!
  periodTxCount: BigInt!

  # liquidity stats at end of period
  totalLiquidityToken: BigDecimal!
  totalLiquidityETH: BigDecimal!
  totalLiquidityUSD: BigDecimal!

  # price stats
  priceUSD: BigDecimal!
}

# There must be a way to generate defaults
input PoolWhere {
  volumeUSD_lt: BigDecimal,
  reserveUSD_gt: BigDecimal
}

input PoolDayDatasWhere {
  id: ID,
  date_gt: Int,
  date_lt: Int,
}

input PoolHourDatasWhere {
  id: ID,
  periodStartUnix_gt: Int,
  periodStartUnix_lt: Int,
}

type Query {
  bundle(id: ID!, block: Int): Bundle
  pool(id: ID!, block: Int): Pool
  pools(first: Int, orderBy: String, orderDirection: String, where: PoolWhere): [Pool]
  poolDayData(id: ID!): PoolDayData
  poolDayDatas(orderBy: String, orderDirection: String, where: PoolDayDatasWhere): [PoolDayData]
  poolHourData(id: ID!): PoolDayData
  poolHourDatas(orderBy: String, orderDirection: String, where: PoolHourDatasWhere): [PoolHourData]
  token(id: ID!): Token
}

schema {
  query: Query
}